ARM GAS  /tmp/cc4IT3P6.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f2xx_hal_pwr.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_PWR_DeInit
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	HAL_PWR_DeInit:
  25              	.LFB72:
  26              		.file 1 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c"
   1:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
   2:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   ******************************************************************************
   3:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @file    stm32f2xx_hal_pwr.c
   4:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @author  MCD Application Team
   5:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *           + Peripheral Control functions 
  10:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         
  11:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   ******************************************************************************
  12:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @attention
  13:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  14:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  15:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * All rights reserved.</center></h2>
  16:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  17:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  18:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * the "License"; You may not use this file except in compliance with the
  19:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * License. You may obtain a copy of the License at:
  20:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *                        opensource.org/licenses/BSD-3-Clause
  21:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  22:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   ******************************************************************************
  23:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  24:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  25:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  26:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #include "stm32f2xx_hal.h"
  27:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  28:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @addtogroup STM32F2xx_HAL_Driver
  29:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  30:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  31:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  32:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR PWR
ARM GAS  /tmp/cc4IT3P6.s 			page 2


  33:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief PWR HAL module driver
  34:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  35:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  36:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  37:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  38:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  39:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  40:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  41:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @addtogroup PWR_Private_Constants
  42:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  43:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  44:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
  45:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR_PVD_Mode_Mask PWR PVD Mode Mask
  46:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  47:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */     
  48:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #define PVD_MODE_IT               0x00010000U
  49:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #define PVD_MODE_EVT              0x00020000U
  50:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #define PVD_RISING_EDGE           0x00000001U
  51:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #define PVD_FALLING_EDGE          0x00000002U
  52:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
  53:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @}
  54:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  55:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  56:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
  57:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @}
  58:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */    
  59:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  60:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  61:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  62:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private functions ---------------------------------------------------------*/
  63:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  64:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
  65:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  66:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  67:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  68:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions 
  69:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *  @brief    Initialization and de-initialization functions
  70:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  71:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** @verbatim
  72:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  ===============================================================================
  73:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  74:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  ===============================================================================
  75:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
  76:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data 
  77:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       registers and backup SRAM) is protected against possible unwanted 
  78:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       write accesses. 
  79:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
  80:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
  81:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****             __HAL_RCC_PWR_CLK_ENABLE() macro.
  82:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  83:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  
  84:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** @endverbatim
  85:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  86:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  87:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  88:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
  89:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
ARM GAS  /tmp/cc4IT3P6.s 			page 3


  90:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
  91:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  92:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
  93:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
  27              		.loc 1 93 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  94:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  32              		.loc 1 94 3 view .LVU1
  33 0000 044B     		ldr	r3, .L2
  34 0002 1A6A     		ldr	r2, [r3, #32]
  35 0004 42F08052 		orr	r2, r2, #268435456
  36 0008 1A62     		str	r2, [r3, #32]
  95:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  37              		.loc 1 95 3 view .LVU2
  38 000a 1A6A     		ldr	r2, [r3, #32]
  39 000c 22F08052 		bic	r2, r2, #268435456
  40 0010 1A62     		str	r2, [r3, #32]
  96:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
  41              		.loc 1 96 1 is_stmt 0 view .LVU3
  42 0012 7047     		bx	lr
  43              	.L3:
  44              		.align	2
  45              	.L2:
  46 0014 00380240 		.word	1073887232
  47              		.cfi_endproc
  48              	.LFE72:
  50              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  51              		.align	1
  52              		.global	HAL_PWR_EnableBkUpAccess
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  56              		.fpu softvfp
  58              	HAL_PWR_EnableBkUpAccess:
  59              	.LFB73:
  97:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  98:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
  99:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enables access to the backup domain (RTC registers, RTC 
 100:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         backup data registers and backup SRAM).
 101:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 102:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 103:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 104:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 105:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 106:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
  60              		.loc 1 106 1 is_stmt 1 view -0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		@ link register save eliminated.
 107:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
  65              		.loc 1 107 3 view .LVU5
  66              	.LVL0:
  67              	.LBB10:
ARM GAS  /tmp/cc4IT3P6.s 			page 4


  68              	.LBI10:
  69              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
ARM GAS  /tmp/cc4IT3P6.s 			page 5


  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc4IT3P6.s 			page 6


 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4IT3P6.s 			page 7


 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4IT3P6.s 			page 8


 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/cc4IT3P6.s 			page 9


 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
ARM GAS  /tmp/cc4IT3P6.s 			page 10


 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
ARM GAS  /tmp/cc4IT3P6.s 			page 11


 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4IT3P6.s 			page 12


 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
ARM GAS  /tmp/cc4IT3P6.s 			page 13


 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc4IT3P6.s 			page 14


 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc4IT3P6.s 			page 15


 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
ARM GAS  /tmp/cc4IT3P6.s 			page 16


 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
ARM GAS  /tmp/cc4IT3P6.s 			page 17


 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
ARM GAS  /tmp/cc4IT3P6.s 			page 18


 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc4IT3P6.s 			page 19


 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc4IT3P6.s 			page 20


 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
ARM GAS  /tmp/cc4IT3P6.s 			page 21


 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
  70              		.loc 2 981 31 view .LVU6
  71              	.LBB11:
 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  72              		.loc 2 983 3 view .LVU7
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  73              		.loc 2 988 4 view .LVU8
  74 0000 4FF48073 		mov	r3, #256
  75              		.syntax unified
  76              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  77 0004 93FAA3F3 		rbit r3, r3
  78              	@ 0 "" 2
  79              	.LVL1:
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 995:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
  80              		.loc 2 1001 3 view .LVU9
  81              		.loc 2 1001 3 is_stmt 0 view .LVU10
  82              		.thumb
  83              		.syntax unified
  84              	.LBE11:
  85              	.LBE10:
  86              		.loc 1 107 22 view .LVU11
  87 0008 B3FA83F3 		clz	r3, r3
  88 000c 03F18453 		add	r3, r3, #276824064
  89 0010 03F56033 		add	r3, r3, #229376
  90 0014 9B00     		lsls	r3, r3, #2
  91              		.loc 1 107 32 view .LVU12
  92 0016 0122     		movs	r2, #1
ARM GAS  /tmp/cc4IT3P6.s 			page 22


  93 0018 1A60     		str	r2, [r3]
 108:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
  94              		.loc 1 108 1 view .LVU13
  95 001a 7047     		bx	lr
  96              		.cfi_endproc
  97              	.LFE73:
  99              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
 100              		.align	1
 101              		.global	HAL_PWR_DisableBkUpAccess
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu softvfp
 107              	HAL_PWR_DisableBkUpAccess:
 108              	.LFB74:
 109:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 110:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 111:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables access to the backup domain (RTC registers, RTC 
 112:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         backup data registers and backup SRAM).
 113:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 114:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 115:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 116:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 117:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 118:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 109              		.loc 1 118 1 is_stmt 1 view -0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		@ link register save eliminated.
 119:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 114              		.loc 1 119 3 view .LVU15
 115              	.LVL2:
 116              	.LBB12:
 117              	.LBI12:
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 118              		.loc 2 981 31 view .LVU16
 119              	.LBB13:
 983:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120              		.loc 2 983 3 view .LVU17
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 121              		.loc 2 988 4 view .LVU18
 122 0000 4FF48073 		mov	r3, #256
 123              		.syntax unified
 124              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 125 0004 93FAA3F3 		rbit r3, r3
 126              	@ 0 "" 2
 127              	.LVL3:
 128              		.loc 2 1001 3 view .LVU19
 129              		.loc 2 1001 3 is_stmt 0 view .LVU20
 130              		.thumb
 131              		.syntax unified
 132              	.LBE13:
 133              	.LBE12:
 134              		.loc 1 119 22 view .LVU21
 135 0008 B3FA83F3 		clz	r3, r3
 136 000c 03F18453 		add	r3, r3, #276824064
ARM GAS  /tmp/cc4IT3P6.s 			page 23


 137 0010 03F56033 		add	r3, r3, #229376
 138 0014 9B00     		lsls	r3, r3, #2
 139              		.loc 1 119 32 view .LVU22
 140 0016 0022     		movs	r2, #0
 141 0018 1A60     		str	r2, [r3]
 120:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 142              		.loc 1 120 1 view .LVU23
 143 001a 7047     		bx	lr
 144              		.cfi_endproc
 145              	.LFE74:
 147              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
 148              		.align	1
 149              		.global	HAL_PWR_ConfigPVD
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 153              		.fpu softvfp
 155              	HAL_PWR_ConfigPVD:
 156              	.LVL4:
 157              	.LFB75:
 121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 122:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 123:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @}
 124:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 125:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 126:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions 
 127:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *  @brief Low Power modes configuration functions 
 128:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
 129:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** @verbatim
 130:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 131:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  ===============================================================================
 132:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 133:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  ===============================================================================
 134:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      
 135:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     *** PVD configuration ***
 136:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     =========================
 137:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 138:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a 
 139:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 140:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower 
 141:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI 
 142:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           line16 and can generate an interrupt if enabled. This is done through
 143:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           __HAL_PWR_PVD_EXTI_ENABLE_IT() macro.
 144:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) The PVD is stopped in Standby mode.
 145:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 146:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     *** Wake-up pin configuration ***
 147:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     ================================
 148:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 149:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Wake-up pin is used to wake up the system from Standby mode. This pin is 
 150:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           forced in input pull-down configuration and is active on rising edges.
 151:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) There is one Wake-up pin: Wake-up Pin 1 on PA.00.
 152:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 153:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     *** Low Power modes configuration ***
 154:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     =====================================
 155:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 156:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The devices feature 3 low-power modes:
 157:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M3 core stopped, peripherals kept running.
ARM GAS  /tmp/cc4IT3P6.s 			page 24


 158:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Stop mode: all clocks are stopped, regulator running, regulator 
 159:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           in low power mode
 160:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Standby mode: 1.2V domain powered off.
 161:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    
 162:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    *** Sleep mode ***
 163:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    ==================
 164:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 165:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Entry:
 166:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         The Sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLE
 167:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               functions with
 168:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 169:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 170:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       
 171:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       -@@- The Regulator parameter is not used for the STM32F2 family 
 172:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               and is kept as parameter just to maintain compatibility with the 
 173:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               lower power families (STM32L).
 174:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Exit:
 175:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         Any peripheral interrupt acknowledged by the nested vectored interrupt 
 176:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               controller (NVIC) can wake up the device from Sleep mode.
 177:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 178:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    *** Stop mode ***
 179:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    =================
 180:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 181:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 182:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 183:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       are preserved.
 184:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode.
 185:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       To minimize the consumption In Stop mode, FLASH can be powered off before 
 186:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       entering the Stop mode using the HAL_PWREx_EnableFlashPowerDown() function.
 187:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       It can be switched on again by software after exiting the Stop mode using
 188:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       the HAL_PWREx_DisableFlashPowerDown() function. 
 189:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 190:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Entry:
 191:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****          The Stop mode is entered using the HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON) 
 192:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****              function with:
 193:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           (++) Main regulator ON.
 194:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           (++) Low Power regulator ON.
 195:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Exit:
 196:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 197:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 198:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    *** Standby mode ***
 199:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    ====================
 200:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 201:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     (+)
 202:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based 
 203:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       on the Cortex-M3 deep sleep mode, with the voltage regulator disabled. 
 204:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 205:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       the HSE oscillator are also switched off. SRAM and register contents are lost 
 206:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 207:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       circuitry.
 208:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    
 209:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The voltage regulator is OFF.
 210:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       
 211:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (++) Entry:
 212:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (+++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.
 213:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (++) Exit:
 214:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (+++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wake-up,
ARM GAS  /tmp/cc4IT3P6.s 			page 25


 215:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.
 216:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 217:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    *** Auto-wake-up (AWU) from low-power mode ***
 218:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    =============================================
 219:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 220:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     
 221:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      (+) The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 222:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       Wake-up event, a tamper event or a time-stamp event, without depending on 
 223:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       an external interrupt (Auto-wake-up mode).
 224:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 225:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) RTC auto-wake-up (AWU) from the Stop and Standby modes
 226:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****        
 227:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to 
 228:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() function.
 229:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 230:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 231:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****              is necessary to configure the RTC to detect the tamper or time stamp event using the
 232:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****                 HAL_RTCEx_SetTimeStamp_IT() or HAL_RTCEx_SetTamper_IT() functions.
 233:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****                   
 234:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Wake-up event, it is necessary to
 235:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               configure the RTC to generate the RTC Wake-up event using the HAL_RTCEx_SetWakeUpTime
 236:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 237:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** @endverbatim
 238:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
 239:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 240:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 241:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 242:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 243:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param sConfigPVD pointer to an PWR_PVDTypeDef structure that contains the configuration
 244:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *        information for the PVD.
 245:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note Refer to the electrical characteristics of your device datasheet for
 246:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 247:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         detection level.
 248:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 249:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 250:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
 251:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 158              		.loc 1 251 1 is_stmt 1 view -0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 252:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameters */
 253:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
 163              		.loc 1 253 3 view .LVU25
 254:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 164              		.loc 1 254 3 view .LVU26
 255:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 256:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set PLS[7:5] bits according to PVDLevel value */
 257:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 165              		.loc 1 257 3 view .LVU27
 166 0000 1E4A     		ldr	r2, .L11
 167 0002 1368     		ldr	r3, [r2]
 168 0004 23F0E003 		bic	r3, r3, #224
 169 0008 0168     		ldr	r1, [r0]
 170 000a 0B43     		orrs	r3, r3, r1
 171 000c 1360     		str	r3, [r2]
ARM GAS  /tmp/cc4IT3P6.s 			page 26


 258:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 259:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Clear any previous config. Keep it clear if no event or IT mode is selected */
 260:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 172              		.loc 1 260 3 view .LVU28
 173 000e 1C4B     		ldr	r3, .L11+4
 174 0010 5A68     		ldr	r2, [r3, #4]
 175 0012 22F48032 		bic	r2, r2, #65536
 176 0016 5A60     		str	r2, [r3, #4]
 261:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 177              		.loc 1 261 3 view .LVU29
 178 0018 1A68     		ldr	r2, [r3]
 179 001a 22F48032 		bic	r2, r2, #65536
 180 001e 1A60     		str	r2, [r3]
 262:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 181              		.loc 1 262 3 view .LVU30
 182 0020 9A68     		ldr	r2, [r3, #8]
 183 0022 22F48032 		bic	r2, r2, #65536
 184 0026 9A60     		str	r2, [r3, #8]
 263:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 185              		.loc 1 263 3 view .LVU31
 186 0028 DA68     		ldr	r2, [r3, #12]
 187 002a 22F48032 		bic	r2, r2, #65536
 188 002e DA60     		str	r2, [r3, #12]
 264:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 265:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Configure interrupt mode */
 266:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 189              		.loc 1 266 3 view .LVU32
 190              		.loc 1 266 17 is_stmt 0 view .LVU33
 191 0030 4368     		ldr	r3, [r0, #4]
 192              		.loc 1 266 5 view .LVU34
 193 0032 13F4803F 		tst	r3, #65536
 194 0036 04D0     		beq	.L7
 267:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 268:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 195              		.loc 1 268 5 is_stmt 1 view .LVU35
 196 0038 114A     		ldr	r2, .L11+4
 197 003a 1368     		ldr	r3, [r2]
 198 003c 43F48033 		orr	r3, r3, #65536
 199 0040 1360     		str	r3, [r2]
 200              	.L7:
 269:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 270:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 271:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Configure event mode */
 272:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 201              		.loc 1 272 3 view .LVU36
 202              		.loc 1 272 17 is_stmt 0 view .LVU37
 203 0042 4368     		ldr	r3, [r0, #4]
 204              		.loc 1 272 5 view .LVU38
 205 0044 13F4003F 		tst	r3, #131072
 206 0048 04D0     		beq	.L8
 273:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 274:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 207              		.loc 1 274 5 is_stmt 1 view .LVU39
 208 004a 0D4A     		ldr	r2, .L11+4
 209 004c 5368     		ldr	r3, [r2, #4]
 210 004e 43F48033 		orr	r3, r3, #65536
 211 0052 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/cc4IT3P6.s 			page 27


 212              	.L8:
 275:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 276:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 277:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Configure the edge */
 278:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 213              		.loc 1 278 3 view .LVU40
 214              		.loc 1 278 17 is_stmt 0 view .LVU41
 215 0054 4368     		ldr	r3, [r0, #4]
 216              		.loc 1 278 5 view .LVU42
 217 0056 13F0010F 		tst	r3, #1
 218 005a 04D0     		beq	.L9
 279:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 280:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 219              		.loc 1 280 5 is_stmt 1 view .LVU43
 220 005c 084A     		ldr	r2, .L11+4
 221 005e 9368     		ldr	r3, [r2, #8]
 222 0060 43F48033 		orr	r3, r3, #65536
 223 0064 9360     		str	r3, [r2, #8]
 224              	.L9:
 281:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 282:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 283:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 225              		.loc 1 283 3 view .LVU44
 226              		.loc 1 283 17 is_stmt 0 view .LVU45
 227 0066 4368     		ldr	r3, [r0, #4]
 228              		.loc 1 283 5 view .LVU46
 229 0068 13F0020F 		tst	r3, #2
 230 006c 04D0     		beq	.L6
 284:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 285:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 231              		.loc 1 285 5 is_stmt 1 view .LVU47
 232 006e 044A     		ldr	r2, .L11+4
 233 0070 D368     		ldr	r3, [r2, #12]
 234 0072 43F48033 		orr	r3, r3, #65536
 235 0076 D360     		str	r3, [r2, #12]
 236              	.L6:
 286:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 287:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 237              		.loc 1 287 1 is_stmt 0 view .LVU48
 238 0078 7047     		bx	lr
 239              	.L12:
 240 007a 00BF     		.align	2
 241              	.L11:
 242 007c 00700040 		.word	1073770496
 243 0080 003C0140 		.word	1073822720
 244              		.cfi_endproc
 245              	.LFE75:
 247              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 248              		.align	1
 249              		.global	HAL_PWR_EnablePVD
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu softvfp
 255              	HAL_PWR_EnablePVD:
 256              	.LFB76:
 288:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
ARM GAS  /tmp/cc4IT3P6.s 			page 28


 289:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 290:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enables the Power Voltage Detector(PVD).
 291:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 292:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 293:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 294:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 257              		.loc 1 294 1 is_stmt 1 view -0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 295:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 262              		.loc 1 295 3 view .LVU50
 263              	.LVL5:
 264              	.LBB14:
 265              	.LBI14:
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 266              		.loc 2 981 31 view .LVU51
 267              	.LBB15:
 983:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268              		.loc 2 983 3 view .LVU52
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 269              		.loc 2 988 4 view .LVU53
 270 0000 1023     		movs	r3, #16
 271              		.syntax unified
 272              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 273 0002 93FAA3F3 		rbit r3, r3
 274              	@ 0 "" 2
 275              	.LVL6:
 276              		.loc 2 1001 3 view .LVU54
 277              		.loc 2 1001 3 is_stmt 0 view .LVU55
 278              		.thumb
 279              		.syntax unified
 280              	.LBE15:
 281              	.LBE14:
 282              		.loc 1 295 22 view .LVU56
 283 0006 B3FA83F3 		clz	r3, r3
 284 000a 03F18453 		add	r3, r3, #276824064
 285 000e 03F56033 		add	r3, r3, #229376
 286 0012 9B00     		lsls	r3, r3, #2
 287              		.loc 1 295 33 view .LVU57
 288 0014 0122     		movs	r2, #1
 289 0016 1A60     		str	r2, [r3]
 296:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 290              		.loc 1 296 1 view .LVU58
 291 0018 7047     		bx	lr
 292              		.cfi_endproc
 293              	.LFE76:
 295              		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 296              		.align	1
 297              		.global	HAL_PWR_DisablePVD
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 301              		.fpu softvfp
 303              	HAL_PWR_DisablePVD:
 304              	.LFB77:
ARM GAS  /tmp/cc4IT3P6.s 			page 29


 297:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 298:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 299:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables the Power Voltage Detector(PVD).
 300:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 301:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 302:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 303:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 305              		.loc 1 303 1 is_stmt 1 view -0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              		@ link register save eliminated.
 304:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 310              		.loc 1 304 3 view .LVU60
 311              	.LVL7:
 312              	.LBB16:
 313              	.LBI16:
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 314              		.loc 2 981 31 view .LVU61
 315              	.LBB17:
 983:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 316              		.loc 2 983 3 view .LVU62
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 317              		.loc 2 988 4 view .LVU63
 318 0000 1023     		movs	r3, #16
 319              		.syntax unified
 320              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 321 0002 93FAA3F3 		rbit r3, r3
 322              	@ 0 "" 2
 323              	.LVL8:
 324              		.loc 2 1001 3 view .LVU64
 325              		.loc 2 1001 3 is_stmt 0 view .LVU65
 326              		.thumb
 327              		.syntax unified
 328              	.LBE17:
 329              	.LBE16:
 330              		.loc 1 304 22 view .LVU66
 331 0006 B3FA83F3 		clz	r3, r3
 332 000a 03F18453 		add	r3, r3, #276824064
 333 000e 03F56033 		add	r3, r3, #229376
 334 0012 9B00     		lsls	r3, r3, #2
 335              		.loc 1 304 33 view .LVU67
 336 0014 0022     		movs	r2, #0
 337 0016 1A60     		str	r2, [r3]
 305:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 338              		.loc 1 305 1 view .LVU68
 339 0018 7047     		bx	lr
 340              		.cfi_endproc
 341              	.LFE77:
 343              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 344              		.align	1
 345              		.global	HAL_PWR_EnableWakeUpPin
 346              		.syntax unified
 347              		.thumb
 348              		.thumb_func
 349              		.fpu softvfp
 351              	HAL_PWR_EnableWakeUpPin:
ARM GAS  /tmp/cc4IT3P6.s 			page 30


 352              	.LVL9:
 353              	.LFB78:
 306:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 307:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 308:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enables the Wake-up PINx functionality.
 309:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param WakeUpPinx Specifies the Power Wake-Up pin to enable.
 310:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 311:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 312:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 313:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 314:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
 315:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 354              		.loc 1 315 1 is_stmt 1 view -0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              		@ link register save eliminated.
 316:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameter */
 317:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 359              		.loc 1 317 3 view .LVU70
 318:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 319:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Enable the wake up pin */
 320:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SET_BIT(PWR->CSR, WakeUpPinx);
 360              		.loc 1 320 3 view .LVU71
 361 0000 024A     		ldr	r2, .L16
 362 0002 5368     		ldr	r3, [r2, #4]
 363 0004 0343     		orrs	r3, r3, r0
 364 0006 5360     		str	r3, [r2, #4]
 321:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 365              		.loc 1 321 1 is_stmt 0 view .LVU72
 366 0008 7047     		bx	lr
 367              	.L17:
 368 000a 00BF     		.align	2
 369              	.L16:
 370 000c 00700040 		.word	1073770496
 371              		.cfi_endproc
 372              	.LFE78:
 374              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 375              		.align	1
 376              		.global	HAL_PWR_DisableWakeUpPin
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 380              		.fpu softvfp
 382              	HAL_PWR_DisableWakeUpPin:
 383              	.LVL10:
 384              	.LFB79:
 322:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 323:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 324:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables the Wake-up PINx functionality.
 325:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param WakeUpPinx Specifies the Power Wake-Up pin to disable.
 326:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 327:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 328:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 329:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 330:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 331:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
ARM GAS  /tmp/cc4IT3P6.s 			page 31


 385              		.loc 1 331 1 is_stmt 1 view -0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389              		@ link register save eliminated.
 332:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameter */
 333:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
 390              		.loc 1 333 3 view .LVU74
 334:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 335:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Disable the wake up pin */
 336:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   CLEAR_BIT(PWR->CSR, WakeUpPinx);
 391              		.loc 1 336 3 view .LVU75
 392 0000 024A     		ldr	r2, .L19
 393 0002 5368     		ldr	r3, [r2, #4]
 394 0004 23EA0003 		bic	r3, r3, r0
 395 0008 5360     		str	r3, [r2, #4]
 337:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 396              		.loc 1 337 1 is_stmt 0 view .LVU76
 397 000a 7047     		bx	lr
 398              	.L20:
 399              		.align	2
 400              	.L19:
 401 000c 00700040 		.word	1073770496
 402              		.cfi_endproc
 403              	.LFE79:
 405              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 406              		.align	1
 407              		.global	HAL_PWR_EnterSLEEPMode
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu softvfp
 413              	HAL_PWR_EnterSLEEPMode:
 414              	.LVL11:
 415              	.LFB80:
 338:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 339:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 340:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enters Sleep mode.
 341:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *   
 342:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note In Sleep mode, all I/O pins keep the same state as in Run mode.
 343:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * 
 344:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note In Sleep mode, the systick is stopped to avoid exit from this mode with
 345:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       systick interrupt when used as time base for Timeout 
 346:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *                
 347:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param Regulator Specifies the regulator state in SLEEP mode.
 348:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            This parameter can be one of the following values:
 349:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: SLEEP mode with regulator ON
 350:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: SLEEP mode with low power regulator ON
 351:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note This parameter is not used for the STM32F2 family and is kept as parameter
 352:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       just to maintain compatibility with the lower power families.
 353:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param  SLEEPEntry Specifies if SLEEP mode in entered with WFI or WFE instruction.
 354:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 355:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 356:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 357:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 358:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 359:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
ARM GAS  /tmp/cc4IT3P6.s 			page 32


 360:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 416              		.loc 1 360 1 is_stmt 1 view -0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 361:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Prevent unused argument(s) compilation warning */
 362:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   UNUSED(Regulator);
 421              		.loc 1 362 3 view .LVU78
 363:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 364:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameters */
 365:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 422              		.loc 1 365 3 view .LVU79
 366:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 423              		.loc 1 366 3 view .LVU80
 367:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 368:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 369:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 424              		.loc 1 369 3 view .LVU81
 425 0000 064A     		ldr	r2, .L25
 426 0002 1369     		ldr	r3, [r2, #16]
 427 0004 23F00403 		bic	r3, r3, #4
 428 0008 1361     		str	r3, [r2, #16]
 370:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 371:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 372:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 429              		.loc 1 372 3 view .LVU82
 430              		.loc 1 372 5 is_stmt 0 view .LVU83
 431 000a 0129     		cmp	r1, #1
 432 000c 03D0     		beq	.L24
 373:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {   
 374:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 375:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFI();
 376:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 377:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   else
 378:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 379:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Request Wait For Event */
 380:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __SEV();
 433              		.loc 1 380 5 is_stmt 1 view .LVU84
 434              		.syntax unified
 435              	@ 380 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c" 1
 436 000e 40BF     		sev
 437              	@ 0 "" 2
 381:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFE();
 438              		.loc 1 381 5 view .LVU85
 439              	@ 381 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c" 1
 440 0010 20BF     		wfe
 441              	@ 0 "" 2
 382:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFE();
 442              		.loc 1 382 5 view .LVU86
 443              	@ 382 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c" 1
 444 0012 20BF     		wfe
 445              	@ 0 "" 2
 383:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 384:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 446              		.loc 1 384 1 is_stmt 0 view .LVU87
 447              		.thumb
ARM GAS  /tmp/cc4IT3P6.s 			page 33


 448              		.syntax unified
 449 0014 7047     		bx	lr
 450              	.L24:
 375:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 451              		.loc 1 375 5 is_stmt 1 view .LVU88
 452              		.syntax unified
 453              	@ 375 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c" 1
 454 0016 30BF     		wfi
 455              	@ 0 "" 2
 456              		.thumb
 457              		.syntax unified
 458 0018 7047     		bx	lr
 459              	.L26:
 460 001a 00BF     		.align	2
 461              	.L25:
 462 001c 00ED00E0 		.word	-536810240
 463              		.cfi_endproc
 464              	.LFE80:
 466              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 467              		.align	1
 468              		.global	HAL_PWR_EnterSTOPMode
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 472              		.fpu softvfp
 474              	HAL_PWR_EnterSTOPMode:
 475              	.LVL12:
 476              	.LFB81:
 385:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 386:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 387:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enters Stop mode. 
 388:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note In Stop mode, all I/O pins keep the same state as in Run mode.
 389:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note When exiting Stop mode by issuing an interrupt or a wake-up event, 
 390:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 391:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note When the voltage regulator operates in low power mode, an additional 
 392:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 393:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 394:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         is higher although the startup time is reduced.    
 395:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param  Regulator Specifies the regulator state in Stop mode.
 396:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 397:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: Stop mode with regulator ON
 398:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: Stop mode with low power regulator ON
 399:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param  STOPEntry Specifies if Stop mode in entered with WFI or WFE instruction.
 400:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 401:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
 402:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
 403:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 404:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 405:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 406:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 477              		.loc 1 406 1 view -0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              		@ link register save eliminated.
 407:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameters */
 408:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
ARM GAS  /tmp/cc4IT3P6.s 			page 34


 482              		.loc 1 408 3 view .LVU90
 409:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 483              		.loc 1 409 3 view .LVU91
 410:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 411:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator val
 412:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 484              		.loc 1 412 3 view .LVU92
 485 0000 0B4A     		ldr	r2, .L31
 486 0002 1368     		ldr	r3, [r2]
 487 0004 23F00303 		bic	r3, r3, #3
 488 0008 0343     		orrs	r3, r3, r0
 489 000a 1360     		str	r3, [r2]
 413:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 414:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 415:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 490              		.loc 1 415 3 view .LVU93
 491 000c 094A     		ldr	r2, .L31+4
 492 000e 1369     		ldr	r3, [r2, #16]
 493 0010 43F00403 		orr	r3, r3, #4
 494 0014 1361     		str	r3, [r2, #16]
 416:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 417:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Select Stop mode entry --------------------------------------------------*/
 418:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 495              		.loc 1 418 3 view .LVU94
 496              		.loc 1 418 5 is_stmt 0 view .LVU95
 497 0016 0129     		cmp	r1, #1
 498 0018 08D0     		beq	.L30
 419:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {   
 420:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 421:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFI();
 422:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 423:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   else
 424:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 425:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Request Wait For Event */
 426:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __SEV();
 499              		.loc 1 426 5 is_stmt 1 view .LVU96
 500              		.syntax unified
 501              	@ 426 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c" 1
 502 001a 40BF     		sev
 503              	@ 0 "" 2
 427:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFE();
 504              		.loc 1 427 5 view .LVU97
 505              	@ 427 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c" 1
 506 001c 20BF     		wfe
 507              	@ 0 "" 2
 428:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFE();
 508              		.loc 1 428 5 view .LVU98
 509              	@ 428 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c" 1
 510 001e 20BF     		wfe
 511              	@ 0 "" 2
 512              		.thumb
 513              		.syntax unified
 514              	.L29:
 429:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 430:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 431:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 515              		.loc 1 431 3 view .LVU99
ARM GAS  /tmp/cc4IT3P6.s 			page 35


 516 0020 044A     		ldr	r2, .L31+4
 517 0022 1369     		ldr	r3, [r2, #16]
 518 0024 23F00403 		bic	r3, r3, #4
 519 0028 1361     		str	r3, [r2, #16]
 432:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 520              		.loc 1 432 1 is_stmt 0 view .LVU100
 521 002a 7047     		bx	lr
 522              	.L30:
 421:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 523              		.loc 1 421 5 is_stmt 1 view .LVU101
 524              		.syntax unified
 525              	@ 421 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c" 1
 526 002c 30BF     		wfi
 527              	@ 0 "" 2
 528              		.thumb
 529              		.syntax unified
 530 002e F7E7     		b	.L29
 531              	.L32:
 532              		.align	2
 533              	.L31:
 534 0030 00700040 		.word	1073770496
 535 0034 00ED00E0 		.word	-536810240
 536              		.cfi_endproc
 537              	.LFE81:
 539              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 540              		.align	1
 541              		.global	HAL_PWR_EnterSTANDBYMode
 542              		.syntax unified
 543              		.thumb
 544              		.thumb_func
 545              		.fpu softvfp
 547              	HAL_PWR_EnterSTANDBYMode:
 548              	.LFB82:
 433:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 434:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 435:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enters Standby mode.
 436:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note In Standby mode, all I/O pins are high impedance except for:
 437:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          - Reset pad (still available) 
 438:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 439:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 440:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 441:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 442:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 443:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 444:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 445:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 549              		.loc 1 445 1 view -0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 0
 552              		@ frame_needed = 0, uses_anonymous_args = 0
 553              		@ link register save eliminated.
 446:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Select Standby mode */
 447:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SET_BIT(PWR->CR, PWR_CR_PDDS);
 554              		.loc 1 447 3 view .LVU103
 555 0000 054A     		ldr	r2, .L34
 556 0002 1368     		ldr	r3, [r2]
 557 0004 43F00203 		orr	r3, r3, #2
ARM GAS  /tmp/cc4IT3P6.s 			page 36


 558 0008 1360     		str	r3, [r2]
 448:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 449:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 450:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 559              		.loc 1 450 3 view .LVU104
 560 000a 044A     		ldr	r2, .L34+4
 561 000c 1369     		ldr	r3, [r2, #16]
 562 000e 43F00403 		orr	r3, r3, #4
 563 0012 1361     		str	r3, [r2, #16]
 451:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 452:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* This option is used to ensure that store operations are completed */
 453:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #if defined ( __CC_ARM)
 454:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __force_stores();
 455:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #endif
 456:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 457:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __WFI();
 564              		.loc 1 457 3 view .LVU105
 565              		.syntax unified
 566              	@ 457 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c" 1
 567 0014 30BF     		wfi
 568              	@ 0 "" 2
 458:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 569              		.loc 1 458 1 is_stmt 0 view .LVU106
 570              		.thumb
 571              		.syntax unified
 572 0016 7047     		bx	lr
 573              	.L35:
 574              		.align	2
 575              	.L34:
 576 0018 00700040 		.word	1073770496
 577 001c 00ED00E0 		.word	-536810240
 578              		.cfi_endproc
 579              	.LFE82:
 581              		.section	.text.HAL_PWR_PVDCallback,"ax",%progbits
 582              		.align	1
 583              		.weak	HAL_PWR_PVDCallback
 584              		.syntax unified
 585              		.thumb
 586              		.thumb_func
 587              		.fpu softvfp
 589              	HAL_PWR_PVDCallback:
 590              	.LFB84:
 459:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 460:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 461:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief This function handles the PWR PVD interrupt request.
 462:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note This API should be called under the PVD_IRQHandler().
 463:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 464:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 465:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_PVD_IRQHandler(void)
 466:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 467:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check PWR Exti flag */
 468:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 469:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 470:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* PWR PVD interrupt user callback */
 471:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     HAL_PWR_PVDCallback();
 472:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     
 473:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Clear PWR Exti pending bit */
ARM GAS  /tmp/cc4IT3P6.s 			page 37


 474:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 475:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 476:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 477:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 478:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 479:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief  PWR PVD interrupt callback
 480:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 481:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 482:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** __weak void HAL_PWR_PVDCallback(void)
 483:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 591              		.loc 1 483 1 is_stmt 1 view -0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              		@ link register save eliminated.
 484:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 485:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****             the HAL_PWR_PVDCallback could be implemented in the user file
 486:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    */ 
 487:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 596              		.loc 1 487 1 view .LVU108
 597 0000 7047     		bx	lr
 598              		.cfi_endproc
 599              	.LFE84:
 601              		.section	.text.HAL_PWR_PVD_IRQHandler,"ax",%progbits
 602              		.align	1
 603              		.global	HAL_PWR_PVD_IRQHandler
 604              		.syntax unified
 605              		.thumb
 606              		.thumb_func
 607              		.fpu softvfp
 609              	HAL_PWR_PVD_IRQHandler:
 610              	.LFB83:
 466:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check PWR Exti flag */
 611              		.loc 1 466 1 view -0
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 0
 614              		@ frame_needed = 0, uses_anonymous_args = 0
 615 0000 08B5     		push	{r3, lr}
 616              	.LCFI0:
 617              		.cfi_def_cfa_offset 8
 618              		.cfi_offset 3, -8
 619              		.cfi_offset 14, -4
 468:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 620              		.loc 1 468 3 view .LVU110
 468:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 621              		.loc 1 468 6 is_stmt 0 view .LVU111
 622 0002 064B     		ldr	r3, .L41
 623 0004 5B69     		ldr	r3, [r3, #20]
 468:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 624              		.loc 1 468 5 view .LVU112
 625 0006 13F4803F 		tst	r3, #65536
 626 000a 00D1     		bne	.L40
 627              	.L37:
 476:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 628              		.loc 1 476 1 view .LVU113
 629 000c 08BD     		pop	{r3, pc}
 630              	.L40:
ARM GAS  /tmp/cc4IT3P6.s 			page 38


 471:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     
 631              		.loc 1 471 5 is_stmt 1 view .LVU114
 632 000e FFF7FEFF 		bl	HAL_PWR_PVDCallback
 633              	.LVL13:
 474:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 634              		.loc 1 474 5 view .LVU115
 635 0012 024B     		ldr	r3, .L41
 636 0014 4FF48032 		mov	r2, #65536
 637 0018 5A61     		str	r2, [r3, #20]
 476:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 638              		.loc 1 476 1 is_stmt 0 view .LVU116
 639 001a F7E7     		b	.L37
 640              	.L42:
 641              		.align	2
 642              	.L41:
 643 001c 003C0140 		.word	1073822720
 644              		.cfi_endproc
 645              	.LFE83:
 647              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 648              		.align	1
 649              		.global	HAL_PWR_EnableSleepOnExit
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu softvfp
 655              	HAL_PWR_EnableSleepOnExit:
 656              	.LFB85:
 488:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 489:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 490:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Indicates Sleep-On-Exit when returning from Handler mode to Thread mode. 
 491:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 492:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 493:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
 494:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       interruptions handling.         
 495:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 496:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 497:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 498:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 657              		.loc 1 498 1 is_stmt 1 view -0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 0
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661              		@ link register save eliminated.
 499:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 500:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 662              		.loc 1 500 3 view .LVU118
 663 0000 024A     		ldr	r2, .L44
 664 0002 1369     		ldr	r3, [r2, #16]
 665 0004 43F00203 		orr	r3, r3, #2
 666 0008 1361     		str	r3, [r2, #16]
 501:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 667              		.loc 1 501 1 is_stmt 0 view .LVU119
 668 000a 7047     		bx	lr
 669              	.L45:
 670              		.align	2
 671              	.L44:
 672 000c 00ED00E0 		.word	-536810240
ARM GAS  /tmp/cc4IT3P6.s 			page 39


 673              		.cfi_endproc
 674              	.LFE85:
 676              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 677              		.align	1
 678              		.global	HAL_PWR_DisableSleepOnExit
 679              		.syntax unified
 680              		.thumb
 681              		.thumb_func
 682              		.fpu softvfp
 684              	HAL_PWR_DisableSleepOnExit:
 685              	.LFB86:
 502:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 503:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 504:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables Sleep-On-Exit feature when returning from Handler mode to Thread mode. 
 505:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 506:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.          
 507:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 508:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 509:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 510:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 686              		.loc 1 510 1 is_stmt 1 view -0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 0
 689              		@ frame_needed = 0, uses_anonymous_args = 0
 690              		@ link register save eliminated.
 511:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 512:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 691              		.loc 1 512 3 view .LVU121
 692 0000 024A     		ldr	r2, .L47
 693 0002 1369     		ldr	r3, [r2, #16]
 694 0004 23F00203 		bic	r3, r3, #2
 695 0008 1361     		str	r3, [r2, #16]
 513:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 696              		.loc 1 513 1 is_stmt 0 view .LVU122
 697 000a 7047     		bx	lr
 698              	.L48:
 699              		.align	2
 700              	.L47:
 701 000c 00ED00E0 		.word	-536810240
 702              		.cfi_endproc
 703              	.LFE86:
 705              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 706              		.align	1
 707              		.global	HAL_PWR_EnableSEVOnPend
 708              		.syntax unified
 709              		.thumb
 710              		.thumb_func
 711              		.fpu softvfp
 713              	HAL_PWR_EnableSEVOnPend:
 714              	.LFB87:
 514:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 515:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 516:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enables CORTEX M3 SEVONPEND bit. 
 517:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
 518:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 519:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 520:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
ARM GAS  /tmp/cc4IT3P6.s 			page 40


 521:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 522:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 715              		.loc 1 522 1 is_stmt 1 view -0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              		@ link register save eliminated.
 523:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 524:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 720              		.loc 1 524 3 view .LVU124
 721 0000 024A     		ldr	r2, .L50
 722 0002 1369     		ldr	r3, [r2, #16]
 723 0004 43F01003 		orr	r3, r3, #16
 724 0008 1361     		str	r3, [r2, #16]
 525:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 725              		.loc 1 525 1 is_stmt 0 view .LVU125
 726 000a 7047     		bx	lr
 727              	.L51:
 728              		.align	2
 729              	.L50:
 730 000c 00ED00E0 		.word	-536810240
 731              		.cfi_endproc
 732              	.LFE87:
 734              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 735              		.align	1
 736              		.global	HAL_PWR_DisableSEVOnPend
 737              		.syntax unified
 738              		.thumb
 739              		.thumb_func
 740              		.fpu softvfp
 742              	HAL_PWR_DisableSEVOnPend:
 743              	.LFB88:
 526:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 527:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 528:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables CORTEX M3 SEVONPEND bit. 
 529:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
 530:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.         
 531:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 532:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 533:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 534:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 744              		.loc 1 534 1 is_stmt 1 view -0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              		@ link register save eliminated.
 535:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 536:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 749              		.loc 1 536 3 view .LVU127
 750 0000 024A     		ldr	r2, .L53
 751 0002 1369     		ldr	r3, [r2, #16]
 752 0004 23F01003 		bic	r3, r3, #16
 753 0008 1361     		str	r3, [r2, #16]
 537:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 754              		.loc 1 537 1 is_stmt 0 view .LVU128
 755 000a 7047     		bx	lr
 756              	.L54:
ARM GAS  /tmp/cc4IT3P6.s 			page 41


 757              		.align	2
 758              	.L53:
 759 000c 00ED00E0 		.word	-536810240
 760              		.cfi_endproc
 761              	.LFE88:
 763              		.text
 764              	.Letext0:
 765              		.file 3 "/home/onur/STM32Toolchain/gcc-arm/arm-none-eabi/include/machine/_default_types.h"
 766              		.file 4 "/home/onur/STM32Toolchain/gcc-arm/arm-none-eabi/include/sys/_stdint.h"
 767              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 768              		.file 6 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/stm32f215xx.h"
 769              		.file 7 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/stm32f2xx.h"
 770              		.file 8 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal_pwr.h"
ARM GAS  /tmp/cc4IT3P6.s 			page 42


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f2xx_hal_pwr.c
     /tmp/cc4IT3P6.s:16     .text.HAL_PWR_DeInit:0000000000000000 $t
     /tmp/cc4IT3P6.s:24     .text.HAL_PWR_DeInit:0000000000000000 HAL_PWR_DeInit
     /tmp/cc4IT3P6.s:46     .text.HAL_PWR_DeInit:0000000000000014 $d
     /tmp/cc4IT3P6.s:51     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 $t
     /tmp/cc4IT3P6.s:58     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 HAL_PWR_EnableBkUpAccess
     /tmp/cc4IT3P6.s:100    .text.HAL_PWR_DisableBkUpAccess:0000000000000000 $t
     /tmp/cc4IT3P6.s:107    .text.HAL_PWR_DisableBkUpAccess:0000000000000000 HAL_PWR_DisableBkUpAccess
     /tmp/cc4IT3P6.s:148    .text.HAL_PWR_ConfigPVD:0000000000000000 $t
     /tmp/cc4IT3P6.s:155    .text.HAL_PWR_ConfigPVD:0000000000000000 HAL_PWR_ConfigPVD
     /tmp/cc4IT3P6.s:242    .text.HAL_PWR_ConfigPVD:000000000000007c $d
     /tmp/cc4IT3P6.s:248    .text.HAL_PWR_EnablePVD:0000000000000000 $t
     /tmp/cc4IT3P6.s:255    .text.HAL_PWR_EnablePVD:0000000000000000 HAL_PWR_EnablePVD
     /tmp/cc4IT3P6.s:296    .text.HAL_PWR_DisablePVD:0000000000000000 $t
     /tmp/cc4IT3P6.s:303    .text.HAL_PWR_DisablePVD:0000000000000000 HAL_PWR_DisablePVD
     /tmp/cc4IT3P6.s:344    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 $t
     /tmp/cc4IT3P6.s:351    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 HAL_PWR_EnableWakeUpPin
     /tmp/cc4IT3P6.s:370    .text.HAL_PWR_EnableWakeUpPin:000000000000000c $d
     /tmp/cc4IT3P6.s:375    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 $t
     /tmp/cc4IT3P6.s:382    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 HAL_PWR_DisableWakeUpPin
     /tmp/cc4IT3P6.s:401    .text.HAL_PWR_DisableWakeUpPin:000000000000000c $d
     /tmp/cc4IT3P6.s:406    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 $t
     /tmp/cc4IT3P6.s:413    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 HAL_PWR_EnterSLEEPMode
     /tmp/cc4IT3P6.s:462    .text.HAL_PWR_EnterSLEEPMode:000000000000001c $d
     /tmp/cc4IT3P6.s:467    .text.HAL_PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/cc4IT3P6.s:474    .text.HAL_PWR_EnterSTOPMode:0000000000000000 HAL_PWR_EnterSTOPMode
     /tmp/cc4IT3P6.s:534    .text.HAL_PWR_EnterSTOPMode:0000000000000030 $d
     /tmp/cc4IT3P6.s:540    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/cc4IT3P6.s:547    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 HAL_PWR_EnterSTANDBYMode
     /tmp/cc4IT3P6.s:576    .text.HAL_PWR_EnterSTANDBYMode:0000000000000018 $d
     /tmp/cc4IT3P6.s:582    .text.HAL_PWR_PVDCallback:0000000000000000 $t
     /tmp/cc4IT3P6.s:589    .text.HAL_PWR_PVDCallback:0000000000000000 HAL_PWR_PVDCallback
     /tmp/cc4IT3P6.s:602    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 $t
     /tmp/cc4IT3P6.s:609    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 HAL_PWR_PVD_IRQHandler
     /tmp/cc4IT3P6.s:643    .text.HAL_PWR_PVD_IRQHandler:000000000000001c $d
     /tmp/cc4IT3P6.s:648    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 $t
     /tmp/cc4IT3P6.s:655    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 HAL_PWR_EnableSleepOnExit
     /tmp/cc4IT3P6.s:672    .text.HAL_PWR_EnableSleepOnExit:000000000000000c $d
     /tmp/cc4IT3P6.s:677    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 $t
     /tmp/cc4IT3P6.s:684    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 HAL_PWR_DisableSleepOnExit
     /tmp/cc4IT3P6.s:701    .text.HAL_PWR_DisableSleepOnExit:000000000000000c $d
     /tmp/cc4IT3P6.s:706    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 $t
     /tmp/cc4IT3P6.s:713    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 HAL_PWR_EnableSEVOnPend
     /tmp/cc4IT3P6.s:730    .text.HAL_PWR_EnableSEVOnPend:000000000000000c $d
     /tmp/cc4IT3P6.s:735    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 $t
     /tmp/cc4IT3P6.s:742    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 HAL_PWR_DisableSEVOnPend
     /tmp/cc4IT3P6.s:759    .text.HAL_PWR_DisableSEVOnPend:000000000000000c $d

NO UNDEFINED SYMBOLS
